January 11, 2025 :

Git Installation and Setup with GitHub :
Install Git:
Open the terminal and execute the following commands to install Git and verify the version installed:

$ sudo apt update  
$ sudo apt install git  
$ git --version  
Example output:
git version 2.43.0


Git SSH Setup with GitHub :
1. Generate a New SSH Key:
Open the terminal and execute the following command:

$ ssh-keygen -t ed25519 -C "harshalbhoyar14@example.com"  
This generates a new public/private SSH key pair.
When prompted, press Enter to accept the default file location.

2. Add Your SSH Key to the SSH-Agent:
   Start the SSH agent in the background:

$ eval "$(ssh-agent -s)"  
Example output:
Agent pid 7353  

3. Add your SSH private key to the SSH agent:
   $ ssh-add ~/.ssh/id_ed25519  

Copy the SSH Key:
Open the public SSH key file:

$ cat ~/.ssh/id_ed25519.pub  
Copy the content displayed.

Add the SSH Key to Your GitHub Account:
Go to your GitHub account and follow these steps:
Click on your profile picture > Settings > SSH and GPG Keys.
Under SSH Keys, click New SSH Key.
Provide a title (e.g., "My Laptop SSH Key") and paste the copied key content in the Key field.
Click Add SSH Key to save the changes.


Setting Up Git
After ensuring Git is installed, configure it with your name and email address to embed your information into each commit:

Execute the following commands:
bash
Copy code
$ git config --global user.name "Harshal Bhoyar"  
$ git config --global user.email "harshalbhoyar14@gmail.com"  
$ git config --list  
Example output:
css
Copy code
user.name=Harshal Bhoyar  
user.email=harshalbhoyar14@gmail.com  
By completing the above steps, your Git and GitHub setup is ready. You can now start creating and managing your repositories!

================================================================================================================================================

January 12, 2025: 

Jenkins Password : 7db1ca36b82a45ec90a9a3a7c85d47b2

Jenkins Credentials :
User : admin
Password : Pass@123
Email : harshalbhoyar14@gmail.com

===========================================================================================================================

Prerequisites to Install Jenkins on Ubuntu 24.04
    1. Server Requirements:
        ◦ A server running Ubuntu 24.04 OS.
        ◦ A user with root or non-root privileges and sudo access.
        ◦ At least 2 GB of RAM (e.g., NVMe 2 VPS plan).

Step 1: Update the System
Before installing any software, ensure your system's packages are up-to-date. Run the following command:

sudo apt update -y && sudo apt upgrade -y

Step 2: Install Java
Jenkins requires Java to run. Install Java by executing:

$ sudo apt install openjdk-21-jdk -y
Once Java is installed, verify the installation using:

$ java -version
Expected output:
root@host:~# java -version
openjdk version "21.0.3" 2024-04-16
OpenJDK Runtime Environment (build 21.0.3+9-Ubuntu-1ubuntu1)
OpenJDK 64-Bit Server VM (build 21.0.3+9-Ubuntu-1ubuntu1, mixed mode, sharing)

Step 3: Add Jenkins GPG Key and Repository
    1. Add the Jenkins GPG key:

       sudo wget -O /usr/share/keyrings/jenkins-keyring.asc https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key
    2. Add the Jenkins repository to the sources list:
       
       echo "deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] https://pkg.jenkins.io/debian-stable binary/" | sudo tee /etc/apt/sources.list.d/jenkins.list > /dev/null
    3. Update the system package list again:
       sudo apt update -y

Step 4: Install Jenkins on Ubuntu 24.04
    1. Install Jenkins by running:
       sudo apt install jenkins -y
    2. Start and enable the Jenkins service:
       sudo systemctl start jenkins && sudo systemctl enable jenkins
    3. Check the status of the Jenkins service:
       sudo systemctl status jenkins
Expected output:
root@host:~# sudo systemctl status jenkins
● jenkins.service - Jenkins Continuous Integration Server
     Loaded: loaded (/usr/lib/systemd/system/jenkins.service; enabled; preset: enabled)
     Active: active (running) since Tue 2024-06-11 09:39:02 CDT; 15s ago
   Main PID: 11666 (java)
      Tasks: 52 (limit: 4613)
     Memory: 1.1G (peak: 1.2G)
        CPU: 1min 24.854s
     CGroup: /system.slice/jenkins.service
             └─11666 /usr/bin/java -Djava.awt.headless=true -jar /usr/share/java/jenkins.war --webroot=/var/cache/jenkins/war --httpPort=8080

Jenkins is now installed and running on your server. Access it via your browser at:
arduino
Copy code
http://<your-server-ip>:8080
Replace <your-server-ip> with the actual IP address of your server.

======================================================================================================================

February 1, 2025 :

Devops Project Workshop | Devops Project 2 (Udemy) :


AWS CLI Installation : 
How to Install AWS CLI in Ubuntu 24.04
Follow these steps to install AWS CLI (v2) on Ubuntu 24.04:
Step 1: Update Packages
Update the package lists:
sudo apt update && sudo apt upgrade -y
Step 2: Install Required Dependencies
Ensure necessary dependencies are installed:
sudo apt install curl unzip -y
Step 3: Download AWS CLI Installer
Download the latest AWS CLI v2 installation script:
curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
Step 4: Extract the ZIP File
unzip awscliv2.zip
Step 5: Run the Installation Script
sudo ./aws/install
Step 6: Verify Installation
Check if AWS CLI is installed successfully:
aws --version
Expected Output (Example):
aws-cli/2.x.x Linux/x86_64
Step 7: Clean Up
After installation, remove the downloaded files:
rm -rf awscliv2.zip aws/
Now, AWS CLI is successfully installed on Ubuntu 24.04. If needed, you can configure it using:
aws configure

================================================================================
Terraform Installation :
Terraform is an Infrastructure-as-Code (IaC) tool that allows you to manage cloud resources efficiently. Follow these steps to install Terraform on Ubuntu 24.04.

Step 1: Update and Upgrade Your System
Before installing Terraform, update your package lists and upgrade existing packages.
bash
CopyEdit
sudo apt update && sudo apt upgrade -y

Step 2: Install Required Dependencies
Ensure that curl and gnupg are installed for fetching and verifying the Terraform package.
bash
CopyEdit
sudo apt install -y curl gnupg software-properties-common

Step 3: Add the HashiCorp GPG Key
Terraform is provided by HashiCorp, so you need to add their GPG key to verify the package.
bash
CopyEdit
curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo tee /etc/apt/trusted.gpg.d/hashicorp.asc

Step 4: Add the HashiCorp Repository
Next, add the HashiCorp repository to your system's package sources.
bash
CopyEdit
sudo add-apt-repository "deb [signed-by=/etc/apt/trusted.gpg.d/hashicorp.asc] https://apt.releases.hashicorp.com $(lsb_release -cs) main"

Step 5: Install Terraform
After adding the repository, update the package lists again and install Terraform.
bash
CopyEdit
sudo apt update
sudo apt install -y terraform

Step 6: Verify the Installation
Check if Terraform is installed correctly by running:
bash
CopyEdit
terraform -v
This should output the installed Terraform version.

Step 7: Enable Tab Completion (Optional)
Enable command-line autocompletion for Terraform:
bash
CopyEdit
terraform -install-autocomplete

Step 8: Initialize Terraform
To verify that Terraform is working, create a new directory and initialize Terraform:
bash
CopyEdit
mkdir terraform-test && cd terraform-test
terraform init
If this completes successfully, Terraform is installed and ready to use!

=======================================================================================================================

To set up AWS CLI from creating a user in IAM to configuring everything properly, follow these detailed steps:

Step 1: Create an IAM User in AWS Console
Log in to AWS Console
Go to AWS Management Console and sign in.

Open IAM (Identity and Access Management)

In the AWS console, search for IAM and open it.
Create a New User

Click on Users > Add users.
Enter a username (e.g., aws-cli-user).
Under Access type, select:
✅ Programmatic access (Required for AWS CLI access).
Set Permissions

Choose Attach policies directly.
Attach the AdministratorAccess policy (or select specific permissions based on your needs).
Review and Create User

Click Create user.
Copy the Access Key ID and Secret Access Key (or download the .csv file).
Step 2: Install AWS CLI on Ubuntu 24.04
1. Update System
sh
Copy
Edit
sudo apt update && sudo apt upgrade -y
2. Install Dependencies
sh
Copy
Edit
sudo apt install curl unzip -y
3. Download AWS CLI v2
sh
Copy
Edit
curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
4. Unzip the Installer
sh
Copy
Edit
unzip awscliv2.zip
5. Install AWS CLI
sh
Copy
Edit
sudo ./aws/install
6. Verify Installation
sh
Copy
Edit
aws --version
Output should be similar to:

bash
Copy
Edit
aws-cli/2.x.x Python/x.x.x Linux/x86_64
Step 3: Configure AWS CLI
Now, configure AWS CLI using the IAM credentials.

1. Run AWS Configure Command
sh
Copy
Edit
aws configure
It will ask for:

AWS Access Key ID: (Paste from IAM)
AWS Secret Access Key: (Paste from IAM)
Default region name: (e.g., us-east-1 or ap-south-1)
Default output format: (json, table, or text)
Step 4: Verify AWS CLI Setup
Run the following command to check if AWS CLI is working:

sh
Copy
Edit
aws s3 ls
If configured correctly, it will list your S3 buckets (if any exist).

Step 5: Additional AWS CLI Setup (Optional)
1. Create a Named Profile
If you want to manage multiple AWS accounts, create a profile:

sh
Copy
Edit
aws configure --profile my-profile
Use the profile with commands:

sh
Copy
Edit
aws s3 ls --profile my-profile
2. Check IAM User Details
sh
Copy
Edit
aws sts get-caller-identity
This will return the AWS Account ID, IAM User ARN, and User ID.

3. List All Available AWS Services
sh
Copy
Edit
aws service-quotas list-services
4. Check Configured Region
sh
Copy
Edit
aws configure get region


===========================================================================================================

Step-by-Step Guide to Creating and Configuring an AWS EC2 Instance with Terraform
Introduction
This guide provides a step-by-step approach to creating and configuring an AWS EC2 instance using Terraform. It includes setting up the provider, defining network resources, and provisioning an EC2 instance.
Step 1: Create a Terraform Configuration File
Create a file named V2-EC2.tf and add the following content.
Step 2: Configure the AWS Provider
Define the required provider and specify the AWS region for resource provisioning.
terraform {
  required_providers {
    aws = {
      source = "hashicorp/aws"
    }
  }
}

provider "aws" {
  region = "us-east-1"
}
Step 3: Define the AWS EC2 Instance
Define the AWS EC2 instance along with its security group, key pair, and subnet.
resource "aws_instance" "demo-server" {
  ami                    = "ami-04b4f1a9cf54c11d0"
  instance_type          = "t2.micro"
  key_name               = "dpp"
  vpc_security_group_ids = [aws_security_group.demo-sg.id]
  subnet_id              = aws_subnet.dpp-public-subnet-01.id
  for_each = toset(["jenkins-master", "build-slave", "ansible"])
  tags = {
    Name = "${each.key}"
  }
}
Step 4: Create a Security Group
Define a security group that allows SSH and HTTP access.
resource "aws_security_group" "demo-sg" {
  name        = "demo-sg"
  description = "SSH Access"
  vpc_id      = aws_vpc.dpp-vpc.id

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "ssh-prot"
  }
}
Step 5: Create a Virtual Private Cloud (VPC)
Define a VPC with a specific CIDR block.
resource "aws_vpc" "dpp-vpc" {
  cidr_block = "10.1.0.0/16"
  tags = {
    Name = "dpp-vpc"
  }
}
Step 6: Create Public Subnets
Define two public subnets in different availability zones.
resource "aws_subnet" "dpp-public-subnet-01" {
  vpc_id                  = aws_vpc.dpp-vpc.id
  cidr_block              = "10.1.1.0/24"
  map_public_ip_on_launch = "true"
  availability_zone       = "us-east-1a"
  tags = {
    Name = "dpp-public-subnet-01"
  }
}

resource "aws_subnet" "dpp-public-subnet-02" {
  vpc_id                  = aws_vpc.dpp-vpc.id
  cidr_block              = "10.1.2.0/24"
  map_public_ip_on_launch = "true"
  availability_zone       = "us-east-1b"
  tags = {
    Name = "dpp-public-subnet-02"
  }
}
Step 7: Create an Internet Gateway
Attach an internet gateway to the VPC.
resource "aws_internet_gateway" "dpp-igw" {
  vpc_id = aws_vpc.dpp-vpc.id
  tags = {
    Name = "dpp-igw"
  }
}
Step 8: Create a Route Table
Define a route table to allow internet access for public subnets.
resource "aws_route_table" "dpp-public-rt" {
  vpc_id = aws_vpc.dpp-vpc.id
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.dpp-igw.id
  }
}
Step 9: Associate Route Table with Subnets
Associate the route table with the public subnets to enable internet access.
resource "aws_route_table_association" "dpp-rta-public-subnet-01" {
  subnet_id      = aws_subnet.dpp-public-subnet-01.id
  route_table_id = aws_route_table.dpp-public-rt.id
}

resource "aws_route_table_association" "dpp-rta-public-subnet-02" {
  subnet_id      = aws_subnet.dpp-public-subnet-02.id
  route_table_id = aws_route_table.dpp-public-rt.id
}
Conclusion
This Terraform configuration sets up an AWS infrastructure with an EC2 instance, security groups, subnets, an internet gateway, and route tables. Once the configuration is complete, apply the Terraform script using:
terraform init
terraform apply




V2-EC2.tf :
# Configure the AWS Provider
  terraform {
    required_providers {
      aws = {
        source = "hashicorp/aws"
      }
    }
  }

  provider "aws" {
    # Specifies the desired AWS region for resource provisioning dcdddv 
    region = "us-east-1"
  }


  resource "aws_instance" "demo-server" {
    ami                    = "ami-04b4f1a9cf54c11d0"
    instance_type          = "t2.micro"
    key_name               = "dpp"
    vpc_security_group_ids = [aws_security_group.demo-sg.id]
    subnet_id              = aws_subnet.dpp-public-subnet-01.id
    #   security_groups = [aws_security_group.terraform-security-group.name]
    for_each = toset(["jenkins-master", "build-slave", "ansible"])
    tags = {
      Name = "${each.key}"
    }
  }


  resource "aws_security_group" "demo-sg" {
    name        = "demo-sg"
    description = "SSH Access"
    vpc_id      = aws_vpc.dpp-vpc.id

    #Incoming traffic
    ingress {
      from_port   = 22
      to_port     = 22
      protocol    = "tcp"
      cidr_blocks = ["0.0.0.0/0"] #replace it with your ip address
    }

    #Outgoing traffic
    egress {
      from_port   = 0
      protocol    = "-1"
      to_port     = 0
      cidr_blocks = ["0.0.0.0/0"]
    }

    #Incoming traffic
    ingress {
      from_port   = 80
      to_port     = 80
      protocol    = "tcp"
      cidr_blocks = ["0.0.0.0/0"] #replace it with your ip address
    }

    #Outgoing traffic
    egress {
      from_port   = 0
      protocol    = "-1"
      to_port     = 0
      cidr_blocks = ["0.0.0.0/0"]
    }

    tags = {
      Name = "ssh-prot"
    }

  }

  resource "aws_vpc" "dpp-vpc" {
    cidr_block = "10.1.0.0/16"
    tags = {
      Name = "dpp-vpc"
    }

  }
  resource "aws_subnet" "dpp-public-subnet-01" {
    vpc_id                  = aws_vpc.dpp-vpc.id
    cidr_block              = "10.1.1.0/24"
    map_public_ip_on_launch = "true"
    availability_zone       = "us-east-1a"
    tags = {
      Name = "dpp-public-subent-01"
    }
  }
  resource "aws_subnet" "dpp-public-subnet-02" {
    vpc_id                  = aws_vpc.dpp-vpc.id
    cidr_block              = "10.1.2.0/24"
    map_public_ip_on_launch = "true"
    availability_zone       = "us-east-1b"
    tags = {
      Name = "dpp-public-subent-02"
    }
  }
  resource "aws_internet_gateway" "dpp-igw" {
    vpc_id = aws_vpc.dpp-vpc.id
    tags = {
      Name = "dpp-igw"
    }
  }
  resource "aws_route_table" "dpp-public-rt" {
    vpc_id = aws_vpc.dpp-vpc.id
    route {
      cidr_block = "0.0.0.0/0"
      gateway_id = aws_internet_gateway.dpp-igw.id
    }
  }
  resource "aws_route_table_association" "dpp-rta-public-subnet-01" {
    subnet_id      = aws_subnet.dpp-public-subnet-01.id
    route_table_id = aws_route_table.dpp-public-rt.id
  }
  resource "aws_route_table_association" "dpp-rta-public-subnet-02" {
    subnet_id      = aws_subnet.dpp-public-subnet-02.id
    route_table_id = aws_route_table.dpp-public-rt.id
  }

==============================================================================
output "instance_public_ips" {
  description = "Public IPs of the EC2 instances"
  value       = { for instance in aws_instance.demo-server : instance.tags["Name"] => instance.public_ip }
}
=======================================================================

Ansible installation on Ubuntu 24.04 :
$ sudo apt update
$ sudo apt install software-properties-common
$ sudo add-apt-repository --yes --update ppa:ansible/ansible
$ sudo apt install ansible


=====================================================================================================================================================================

Installing Ansible on Ubuntu 24.04 :
Used below commands to install ansible on ubuntu 24.04
sudo apt update
sudo apt install software-properties-common
sudo add-apt-repository --yes --update ppa:ansible/ansible
sudo apt install ansible
ansible --version
=======================================================================
Use SCP to copy file from local to EC2:
scp -i dpp.pem dpp.pem ubuntu@2.33.2332.233:/home/ubuntu
=================================================================

Ansible Hosts File Configuration :
Steps to Create a Hosts File
Step 1: Navigate to the Hosts Directory
Run the following command to move to the /opt/hosts directory:
cd /opt/hosts
Step 2: Create and Edit the Hosts File
Open the hosts file using Vim:
vim hosts
Step 3: Add the Following Content to the File
[jenkins-master]
10.1.1.14

[jenkins-master:vars]
ansible_user=ubuntu
ansible_ssh_private_key_file=/opt/dpp.pem

[jenkins-slave]
10.1.1.38

[jenkins-slave:vars]
ansible_user=ubuntu
ansible_ssh_private_key_file=/opt/dpp.pem


Step 4: Save and Exit Vim
    • Press Esc
    • Type :wq
    • Press Enter
Additional Considerations
    • Ensure that the /opt/dpp.pem file has the correct permissions:
      chmod 400 /opt/dpp.pem
    • Test Ansible connectivity to the nodes:
      ansible all -m ping -i /opt/hosts/hosts
      If successful, you should see a pong response from each host.
    • If using multiple Ansible inventory files, specify the hosts file explicitly when running playbooks:
      ansible-playbook -i /opt/hosts/hosts playbook.yml

===========================================================================================================================================

Prevent SSH Disconnection Issue
If your SSH session disconnects automatically after a few minutes, modify the SSH client and server settings:
Client-Side Configuration
Edit or create the SSH config file on your local machine:Prevent SSH Disconnection Issue
If your SSH session disconnects automatically after a few minutes, modify the SSH client and server settings:
Client-Side Configuration
Edit or create the SSH config file on your local machine:
vim ~/.ssh/config
Add the following lines:
Host *
    ServerAliveInterval 60
    ServerAliveCountMax 5
This will send a keep-alive packet every 60 seconds to prevent disconnection.
Server-Side Configuration
Edit the SSH daemon configuration on the EC2 instance:
sudo vim /etc/ssh/sshd_config
Find and modifysudo systemctl restart ssh (or add) the following lines:sudo systemctl restart ssh
ClientAliveInterval 60
ClientAliveCountMax 5
Save the file and restart the SSH service:
sudo service ssh restart
If sshd is not found as a service, the correct command may be:
sudo systemctl restart ssh 

===============================================================================================================================================

Create a playbook to install jenkins on jenkins-master :
Playbook: jenkins-master-setup.yaml
---
- hosts: jenkins-master
  become: true
  tasks:
  - name: add jenkins key
    apt_key:
      url: https://pkg.jenkins.io/debian/jenkins.io.key
      state: present
      
  - name: add jenkins repo
    apt_repository:
      repo: 'deb https://pkg.jenkins.io/debian-stable binary/'
      state: present

  - name: install java
    apt:
      name: openjdk-21-jre
      state: present

  - name: install jenkins
    apt:
      name: jenkins
      state: present

  - name: start jenkins service
    service:
      name: jenkins
      state: started
      enabled: yes

  
Execution Steps
    1. Save the playbook as jenkins-master-setup.yaml.
    2. Run the playbook using the following command:
       ansible-playbook -i /opt/hosts/hosts jenkins-master-setup.yaml
Verification
    • Check if Jenkins is running:
      systemctl status jenkins
    • Verify if Java is installed:
      java -version

===========================================================================================================================================================

Create a playbook to install maven on jenkins-slave :
Playbook: jenkins-master-setup.yaml

---
- hosts: jenkins-slave
  become: true 
  tasks: 
  - name: update ubuntu repo and cache 
    apt: 
      update_cache: yes 
      force_apt_get: yes 
      cache_valid_time: 3600 

  - name: install java 
    apt: 
      name: openjdk-21-jre
      state: present

  - name: download maven packages 
    get_url:
      url: https://dlcdn.apache.org/maven/maven-3/3.9.9/binaries/apache-maven-3.9.9-bin.tar.gz
      dest: /opt

  - name: extract maven packages 
    unarchive:
      src: /opt/apache-maven-3.9.9-bin.tar.gz
      dest: /opt 
      remote_src: yes



Execution Steps
    3. Save the playbook as jenkins-slave-setup.yaml.
    4. Run the playbook using the following command:
       ansible-playbook -i /opt/hosts/hosts jenkins-slave-setup.yaml

=============================================================================================================================================================

Now connect to Jenkins Master.

Get the initial password by following these steps:

Switch to the root user:

sudo su -

Navigate to the Jenkins secrets directory:

cd /var/lib/jenkins/secrets/

Retrieve the initial password:

cat initialpassword

Take this password and connect to Jenkins Master from the web interface using:

URL: http://<public-ip>:8080

Enter the retrieved initial password.

After logging in, proceed with setting up a username and password for Jenkins:

Username: admin

Password: Admin@123

Once completed, Jenkins is set up and ready to use.
================================================================================================================================

Setting Up Maven Credentials in Jenkins
To configure Maven credentials in Jenkins, follow the steps below:
    1. Access Jenkins Master:
        ◦ Log in to the Jenkins master instance.
    2. Navigate to Credentials Management:
        ◦ Click on Manage Jenkins from the Jenkins dashboard.
        ◦ Under the Security section, select Credentials.
    3. Open Global Credentials:
        ◦ Click on System.
        ◦ Select Global credentials (unrestricted).
        ◦ Click on Add Credentials.
    4. Configure SSH Username with Private Key:
        ◦ In the Kind dropdown, select SSH Username with private key.
        ◦ In the ID field, enter: maven-server-cred.
        ◦ In the Description field, enter: Maven server credentials.
        ◦ In the Username field, enter: ubuntu.
    5. Enter Private Key:
        ◦ Under Private Key, select Enter directly.
        ◦ Click on Add and paste the private key content in the provided text area.
    6. Save Credentials:
        ◦ Click on Create to finalize the setup.
Your Maven credentials are now successfully configured in Jenkins.
===============================================================================

Setting Up Maven Node (Build Slave) in Jenkins
Follow the steps below to set up a Maven node (build slave) from Jenkins Master:
Prerequisite:
    • Ensure that credentials for the Jenkins slave have already been added in Jenkins Master.
Step-by-Step Configuration:
    1. Access Node Management:
        ◦ Log in to Jenkins Master.
        ◦ Click on Manage Jenkins.
        ◦ Under System Configuration, select Nodes and Clouds.
    2. Create a New Node:
        ◦ Click on New Node.
        ◦ Enter Node Name as: maven-slave.
        ◦ Select Permanent Agent and click OK.
    3. Configure Node Details:
        ◦ Description: Build Java-based application on this slave.
        ◦ Number of Executors: 3.
        ◦ Remote Root Directory: /home/ubuntu/jenkins.
        ◦ Labels: maven.
        ◦ Usage: Select Use this node as much as possible.
    4. Setup SSH Connection:
        ◦ Launch Method: Select Launch agent via SSH.
        ◦ Host: Enter the private IP of the build slave.
        ◦ Credentials: Click on the dropdown arrow and select the existing credentials that were previously added.
    5. Configure Security & Availability:
        ◦ Host Key Verification Strategy: Select Non verifying Verification Strategy.
        ◦ Availability: Select Keep this agent online as much as possible.
    6. Save Configuration:
        ◦ Click on Save to complete the setup.
Your Maven build slave is now successfully configured in Jenkins.
================================================================================

Step-by-Step Guide to Creating a Jenkins Pipeline (ttrend-job) and Adding Git Credentials
Creating a Pipeline in Jenkins
    1. Open Jenkins and navigate to the Dashboard.
    2. Click on New Item.
    3. Enter the name ttrend-job.
    4. Select Pipeline.
    5. Click on OK.
    6. Scroll down to the Pipeline section.
    7. In the Definition dropdown, select Pipeline script from SCM.
    8. In the SCM dropdown, choose Git.
    9. In the Repository URL field, enter:
       https://github.com/harshalbhoyar/tweet-trend-new.git
    10. Under Credentials, select your saved credentials (e.g., harshalbhoyar).
    11. In Branches to Build, set Branch Specifier as:
       */main
    12. In Script Path, enter:
       Jenkinsfile
    13. Click on Save.
    14. Click on Build Now to trigger the pipeline.
Adding Git Credentials in Jenkins
    1. Click on Manage Jenkins from the dashboard.
    2. Navigate to Credentials > System > Global Credentials.
    3. Click on Add Credentials.
    4. In the Kind dropdown, select Username with Password.
    5. Enter the following details:
        ◦ Username: Your GitHub username
        ◦ Password: Your Personal Access Token (generated from GitHub)
        ◦ ID: Enter Github_Cred
    6. Click on Create.
Updating Jenkinsfile
Update the Jenkinsfile with the following content:
pipeline{
    agent{
        node{
            label 'maven'
        }
    }
    environment{
        MAVEN_HOME = '/opt/apache-maven-3.9.9'
        PATH = "$MAVEN_HOME/bin:$PATH"
    }   
    stages{
        stage('build'){
            steps{
                echo "----------- build started ----------"
                sh 'mvn clean deploy -Dmaven.test.skip=true'
                echo "----------- build completed ----------"
            }
        }
    }
}
Now, your ttrend-job pipeline is configured in Jenkins and ready to build automatically using GitHub repository updates.

==========================================================================================================================================
Process to Create Multi-Branch Pipeline in Jenkins (ttrend-multibranch)

Step 1: Create a New Item

Open Jenkins and click on New Item.

In the Enter an item name field, type ttrend-multibranch.

Scroll down and select Multibranch Pipeline.

Click OK to proceed.

Step 2: Configure General Settings

Under the General section, provide a Display Name as ttrend multibranch.

Step 3: Configure Branch Sources

Scroll down to Branch Sources.

Click on Add Source.

Click on the dropdown arrow and select Git.

In the Repository URL field, provide the Git repository URL, e.g.,

https://github.com/harshalbhoyar/tweet-trend-new.git

Under Credentials:

Click on Add.

Select and provide the existing credentials that are already added.

Example: harshalbhoyar.

Step 4: Configure Build Settings

Under Build Configuration, set:

Mode: Keep default.

Script Path: Jenkinsfile

Click Save.

Jenkins will now automatically scan the multibranch pipeline logs.

Step 5: Create and Scan a New Branch

Create a new branch in the repository named dev.

In ttrend-multibranch, click on Scan Multibranch Pipeline.

Jenkins will automatically detect the dev branch and start building.

The dev branch will be visible along with the build logs.

Summary

Following these steps ensures the successful setup of a Multi-Branch Pipeline in Jenkins, automatically detecting and building new branches based on the repository structure.

=============================================================================================================================================================

Setting Up GitHub Webhook in Jenkins

Step 1: Install Required Plugin

Navigate to the Jenkins Dashboard.

Click on Manage Jenkins > Manage Plugins.

Go to the Available Plugins tab.

In the search bar, type Multibranch Scan Webhook Trigger.

Select the Multibranch Scan Webhook Trigger plugin and click Install without restart.

Step 2: Configure the Multibranch Pipeline

Return to the Jenkins Dashboard.

Open the desired Multibranch Pipeline project (e.g., ttrend-multibranch).

Click on Configure.

Scroll down to Scan Multibranch Pipeline Triggers.

Check the option Scan by Webhook.

In the Trigger token field, enter dpp-token.

Click Save.

Step 3: Configure GitHub Webhook

Open your GitHub repository.

Go to Settings > Webhooks.

Click Add webhook.

In the Payload URL field, enter your Jenkins URL with the webhook endpoint:

http://your-jenkins-url/multibranch-webhook-trigger/invoke?token=dpp-token

Set Content type to application/json.

Select the events you want to trigger the webhook (e.g., Push events).

Click Add webhook.

Step 4: Test the Webhook

Make a change in your GitHub repository (e.g., push a new commit).

Check Jenkins to confirm that the pipeline was triggered.

If the webhook does not trigger, verify the Payload URL, token, and network accessibility.

Your Jenkins is now set up to automatically trigger a build whenever changes are pushed to the GitHub repository!

===============================================================================================================================================

AWS certificate :
https://www.credly.com/badges/1d8aa7bc-aa55-4e80-88a4-a9d45014cc88/linked_in_profile

================================================================================================================================================================================



EKS Cluster Setup with Fargate Profile and ALB Ingress Controller
🛠️ Prerequisites
    • AWS CLI configured
    • eksctl installed
    • kubectl installed
    • IAM permissions to create resources
    • Ubuntu or similar Linux system
    • Helm installed (or steps included below)

1. Create an EKS Cluster Using eksctl
eksctl create cluster \
  --name demo-cluster-1 \
  --region us-east-1 \
  --fargate

✅ This will create a new EKS cluster with Fargate as the compute layer.

2. Update kubeconfig for kubectl access

aws eks update-kubeconfig \
  --name demo-cluster-1 \
  --region us-east-1

✅ This command sets up your kubectl context for the new cluster.

3. Create a Fargate Profile (for custom namespace game-2048)
bash
CopyEdit
eksctl create fargateprofile \
  --cluster demo-cluster-1 \
  --region us-east-1 \
  --name alb-sample-app \
  --namespace game-2048
✅ Now, anything deployed to the game-2048 namespace will run on Fargate.

4. Deploy Application (2048 Game Example)
bash
CopyEdit
kubectl apply -f https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.5.4/docs/examples/2048/2048_full.yaml
✅ This deploys Deployment, Service, and Ingress resources.

5. Verify Deployment and Service
Check running Pods:
bash
CopyEdit
kubectl get pods -n game-2048
kubectl get pods -n game-2048 -w   # Watch mode
Check Service:
bash
CopyEdit
kubectl get svc -n game-2048
Check Ingress:
bash
CopyEdit
kubectl get ingress -n game-2048

📦 ALB Controller Setup
6. Associate IAM OIDC Provider
bash
CopyEdit
eksctl utils associate-iam-oidc-provider \
  --cluster demo-cluster-1 \
  --approve
✅ Enables IAM roles for Kubernetes service accounts.

7. Setup ALB Controller IAM Role
Step 7.1: Download IAM Policy
bash
CopyEdit
curl -O https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/v2.11.0/docs/install/iam_policy.json
Step 7.2: Create IAM Policy
bash
CopyEdit
aws iam create-policy \
  --policy-name AWSLoadBalancerControllerIAMPolicy \
  --policy-document file://iam_policy.json
Step 7.3: Create IAM Service Account with Role
bash
CopyEdit
eksctl create iamserviceaccount \
  --cluster=demo-cluster-1 \
  --namespace=kube-system \
  --name=aws-load-balancer-controller \
  --role-name AmazonEKSLoadBalancerControllerRole \
  --attach-policy-arn=arn:aws:iam::058264365945:policy/AWSLoadBalancerControllerIAMPolicy \
  --approve
🔥 Note: Update the account ID 058264365945 with yours if it's different.

8. Install Helm (if not already installed)
bash
CopyEdit
sudo snap install helm --classic

9. Deploy AWS Load Balancer Controller using Helm
Step 9.1: Add Helm Repo
bash
CopyEdit
helm repo add eks https://aws.github.io/eks-charts
Step 9.2: Update Helm Repo
bash
CopyEdit
helm repo update eks
Step 9.3: Install ALB Controller
bash
CopyEdit
helm install aws-load-balancer-controller eks/aws-load-balancer-controller -n kube-system \
  --set clusterName=demo-cluster-1 \
  --set serviceAccount.create=false \
  --set serviceAccount.name=aws-load-balancer-controller \
  --set region=us-east-1 \
  --set vpcId=vpc-046d525b2031f9249
🔥 Note: Replace vpc-046d525b2031f9249 with your actual VPC ID if different.

10. Verify ALB Controller is Running
bash
CopyEdit
kubectl get deployment -n kube-system aws-load-balancer-controller
kubectl get deployment -n kube-system aws-load-balancer-controller -w   # Watch mode
kubectl get pods -n kube-system -w

🎯 Final Check
    • Ingress should automatically create an ALB (Application Load Balancer).
    • You can access your deployed 2048 game application via the ALB DNS.


=============================================================================================================














